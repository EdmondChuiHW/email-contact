{"version":3,"sources":["components/Loading/Loading.js","components/Loading/index.js","components/ClearButton/ClearButton.js","components/ClearButton/index.js","components/SearchBar/SearchBar.js","components/SearchBar/index.js","components/DebouncedSearchBar/index.js","enhancers/withDebouncedQueryChange.js","components/DebouncedSearchBar/DebouncedSearchBar.js","services/address2councillor.service.js","hooks/useCouncillor/index.js","hooks/useCouncillor/useCouncillor.js","utils/makeYegCoreZoneEmail.js","utils/makeOpenParkingEmail.js","components/EmailButton/ImgOrLeft.js","components/EmailButton/EmailButton.js","components/EmailButton/index.js","services/email-providers/gmailProvider.js","services/email-providers/outlookProvider.js","services/email-providers/yahooProvider.js","services/email-providers/mailToProvider.js","services/email-providers/index.js","utils/hrefSanitizer.js","components/EmailArray/EmailArray.js","components/EmailArray/index.js","components/CouncillorCard/CouncillorCard.js","components/CouncillorCard/index.js","App.js","utils/geolocationProvider.js","serviceWorker.js","index.js","imgs/gmail.ico","imgs/outlook.ico","imgs/yahoo.ico"],"names":["defaultProps","isLoading","size","className","children","Loading","thickness","ClearButton","onClearQuery","aria-label","onClick","always","label","query","autoFocus","onQueryChange","SimpleClearButton","SearchButton","Input","InputBase","SearchBar","elevation","autoComplete","placeholder","value","onChange","DebouncedSearchBar","debounceInMs","Component","Enhanced","rest","useState","setQuery","useDebouncedCallback","debouncedQueryChange","onNewValue","juxt","clearQuery","useCallback","e","target","withDebouncedQueryChange","POSTAL_CODE_REGEX","sanitizeCanadianPostalCode","address","matches","exec","leftPart","rightPart","getCouncillorFromAddress","request","url","process","json","qs","useCouncillor","coords","latitude","longitude","undefined","councillor","setCouncillor","completedQuery","setCompletedQuery","onCouncillorLoaded","pipe","useEffect","req","getCouncillorFromGeo","then","abort","makeYegCoreZoneEmail","role","lastName","ward","makeOpenParkingEmail","src","alt","left","ImgOrLeft","width","height","name","href","EmailButton","color","rel","gmailProvider","gmailIcon","hrefResolver","email","cc","subject","body","outlookProvider","outlookIcon","yahooProvider","yahooIcon","mailToProvider","commonEmailProviders","hrefSanitizer","encodeURIComponent","defaultHrefResolverParams","hrefResolverParamsPicker","pick","keys","makeProviderToButtonMapperWithProps","hrefResolverParams","Button","key","EmailArray","props","providers","map","CouncillorCard","firstName","phone","photoUrl","campaignId","subtitle","when","startsWith","s","normalizeWard","emailCreatorFrom","emailCreator","emailBody","emailSubject","emailProviders","isMobile","variant","component","paragraph","join","geoLocatedConfig","positionOptions","enableHighAccuracy","timeout","userDecisionTimeout","geolocationProvider","navigator","geolocation","App","originalQuery","queryString","window","location","search","iframe","iframe_pls","cid","classNames","document","title","gutterBottom","geolocated","Boolean","hostname","match","ReactDOM","render","getElementById","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.bf0ee952.chunk.js","sourcesContent":["import React from 'react';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport * as PropTypes from 'prop-types';\n\nconst propTypes = {\n  isLoading: PropTypes.bool,\n  size: PropTypes.number,\n  className: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.arrayOf(PropTypes.string),\n  ]),\n  children: PropTypes.node,\n};\n\nconst defaultProps = {\n  isLoading: false,\n  size: 24,\n  className: '',\n  children: <></>,\n};\n\nconst Loading = ({\n  isLoading, size, className, children,\n}) => (isLoading\n  ? <CircularProgress size={size} thickness={4.8} className={className} />\n  : children);\n\nLoading.propTypes = propTypes;\nLoading.defaultProps = defaultProps;\n\nexport default Loading;\n","import Loading from './Loading';\n\nexport default Loading;\n","import React from 'react';\nimport IconButton from '@material-ui/core/IconButton/index';\nimport ClearIcon from '@material-ui/icons/Clear';\nimport { always } from 'ramda';\nimport * as PropTypes from 'prop-types';\n\nconst ClearButton = ({ onClearQuery }) => (\n  <IconButton aria-label=\"Clear\" onClick={onClearQuery}>\n    <ClearIcon />\n  </IconButton>\n);\nClearButton.propTypes = {\n  onClearQuery: PropTypes.func,\n};\nClearButton.defaultProps = {\n  onClearQuery: always,\n};\n\nexport default ClearButton;\n","import ClearButton from './ClearButton';\n\nexport default ClearButton;\n","import React from 'react';\nimport Paper from '@material-ui/core/Paper/index';\nimport IconButton from '@material-ui/core/IconButton/index';\nimport InputBase from '@material-ui/core/InputBase/index';\nimport SearchIcon from '@material-ui/icons/Search';\nimport './SearchBar.css';\nimport { always } from 'ramda';\nimport * as PropTypes from 'prop-types';\nimport Loading from '../Loading';\nimport SimpleClearButton from '../ClearButton';\n\nconst PlaceboSearchButton = () => (\n  <IconButton aria-label=\"Search\">\n    <SearchIcon />\n  </IconButton>\n);\n\nconst propTypes = {\n  label: PropTypes.string,\n  query: PropTypes.string,\n  isLoading: PropTypes.bool,\n  autoFocus: PropTypes.bool,\n  onQueryChange: PropTypes.func,\n  onClearQuery: PropTypes.func,\n  ClearButton: PropTypes.elementType,\n  SearchButton: PropTypes.elementType,\n  Input: PropTypes.elementType,\n};\n\nconst defaultProps = {\n  label: '',\n  query: '',\n  isLoading: false,\n  autoFocus: true,\n  onQueryChange: always,\n  onClearQuery: always,\n  ClearButton: SimpleClearButton,\n  SearchButton: PlaceboSearchButton,\n  Input: InputBase,\n};\n\nconst SearchBar = ({\n  label, query, isLoading, autoFocus, onQueryChange, onClearQuery, ClearButton, SearchButton, Input,\n}) => (\n  <Paper className=\"root\" elevation={1}>\n    <Input\n      autoComplete=\"postal-code\"\n      className=\"input\"\n      autoFocus={autoFocus}\n      placeholder={label}\n      value={query}\n      onChange={onQueryChange}\n    />\n    <Loading isLoading={isLoading} className=\"loading\">\n      {query\n        ? <ClearButton onClearQuery={onClearQuery} />\n        : <SearchButton />\n      }\n    </Loading>\n  </Paper>\n);\n\nSearchBar.propTypes = propTypes;\nSearchBar.defaultProps = defaultProps;\n\nexport default SearchBar;\n","import SearchBar from './SearchBar';\n\nexport default SearchBar;\n","import DebouncedSearchBar from './DebouncedSearchBar';\n\nexport default DebouncedSearchBar;\n","import React, { useCallback, useState } from 'react';\nimport { useDebouncedCallback } from 'use-debounce';\nimport { always, juxt } from 'ramda';\nimport * as PropTypes from 'prop-types';\n\nconst withDebouncedQueryChange = ({ debounceInMs }) => (Component) => {\n  const Enhanced = ({ onQueryChange, ...rest }) => {\n    const [query, setQuery] = useState('');\n    const [debouncedQueryChange] = useDebouncedCallback(onQueryChange, debounceInMs);\n    const onNewValue = juxt([setQuery, debouncedQueryChange]);\n    const clearQuery = useCallback(() => onNewValue(''), [onNewValue]);\n    const onChange = useCallback(e => onNewValue(e.target.value), [onNewValue]);\n\n    return (\n      <Component\n        query={query}\n        onQueryChange={onChange}\n        onClearQuery={clearQuery}\n        {...rest}\n      />\n    );\n  };\n  Enhanced.propTypes = {\n    onQueryChange: PropTypes.func,\n  };\n  Enhanced.defaultProps = {\n    onQueryChange: always,\n  };\n  return Enhanced;\n};\n\nexport default withDebouncedQueryChange;\n","import SearchBar from '../SearchBar';\nimport withDebouncedQueryChange from '../../enhancers/withDebouncedQueryChange';\n\nexport default withDebouncedQueryChange({ debounceInMs: 300 })(SearchBar);\n","import request from 'request-promise-native';\n\nconst POSTAL_CODE_REGEX = /^\\s*([A-Za-z]\\d[A-Za-z])[ -]?(\\d[A-Za-z]\\d)\\s*$/i;\n\n// google API treats \"T5G0M5\" and \"T5G 0M5\" differently\n// if `address` is a postal code, this fn ensures a space is between two parts\nfunction sanitizeCanadianPostalCode(address) {\n  const matches = POSTAL_CODE_REGEX.exec(address);\n  if (!matches) return address;\n\n  const [, leftPart, rightPart] = matches;\n  return `${leftPart} ${rightPart}`;\n}\n\nexport const getCouncillorFromAddress = (address = '') => request({\n  url: `${process.env.REACT_APP_ADDRESS_SERVER_HOST}/address2councillor`,\n  json: true,\n  qs: {\n    address: sanitizeCanadianPostalCode(address),\n  },\n});\n\nexport const getCouncillorFromGeo = ({ latitude = 0, longitude = 0 }) => (\n  getCouncillorFromAddress(`geo: lng: ${longitude}, lat: ${latitude}`)\n);\n","import useCouncillor from './useCouncillor';\n\nexport default useCouncillor;\n","import { useEffect, useState } from 'react';\nimport { pipe } from 'ramda';\nimport { getCouncillorFromAddress, getCouncillorFromGeo } from '../../services/address2councillor.service';\n\nconst useCouncillor = ({ address = '', coords = { latitude: 0, longitude: 0 } }) => {\n  const [councillor, setCouncillor] = useState(undefined);\n  const [completedQuery, setCompletedQuery] = useState(undefined);\n\n  const onCouncillorLoaded = pipe(\n    setCouncillor,\n    () => setCompletedQuery(address),\n  );\n\n  useEffect(() => {\n    const req = coords && !address\n      ? getCouncillorFromGeo(coords)\n      : getCouncillorFromAddress(address);\n    req.then(onCouncillorLoaded);\n    return () => req.abort();\n  }, [address, coords]);\n  return [councillor, completedQuery];\n};\n\nexport default useCouncillor;\n","import { always, juxt } from 'ramda';\n\nconst makeYegCoreZoneEmailBody = ({ role = 'Mayor', lastName = 'Iveson', ward = '' }) => (`Hello ${role} ${lastName},\n\nI want safe and liveable streets. That means 30 km/hr for residential streets in Edmonton. The #YEGCoreZone is the only option being presented to get us there. Please vote to approve the #YEGCoreZone on February 26.\n\nPlease also consider voting to reduce speed limits throughout the rest of Edmonton, in addition to the 30 km/hr Core Zone. It's time for Edmonton's residential streets to become the vibrant, community-building spaces our neighbourhoods and their residents would like to see. Vote YES to the Core Zone on February 26 and YES to slower streets in Edmonton's neighbourhoods.\n\nSincerely,\nConstituent from ${ward || 'Edmonton'}`\n);\n\nconst makeYegCoreZoneEmail = juxt([\n  makeYegCoreZoneEmailBody,\n  always('Speed Limits: Feb 26 Committee Meeting Item 6.1'),\n]);\n\nexport default makeYegCoreZoneEmail;\n","import { always, juxt } from 'ramda';\n\nconst makeOpenParkingEmailBody = ({ role = 'Mayor', lastName = 'Iveson', ward = '' }) => (`Dear ${role} ${lastName},\n\nAs one of your constituents, I would like to register my concern on the issue of parking minimums that is coming to council on January 28.\n\nParking minimums are an unnecessary intrusion on businesses and households. They incentivize car use, force our city to sprawl, and make land unproductive, all factors that contribute to climate change. \n\nI expect Edmonton to be a leader in acting to mitigate the climate emergency.\n\n=====================\nPlease vote for Full Implementation of Open Parking on January 28.\n=====================\n\nSincerely,\nConstituent from ${ward || 'Edmonton'}`\n);\n\nconst makeOpenParkingEmail = juxt([\n  makeOpenParkingEmailBody,\n  always('I Support Full Implementation of Open Parking'),\n]);\n\nexport default makeOpenParkingEmail;\n","import React from 'react';\nimport * as PropTypes from 'prop-types';\n\nconst propTypes = {\n  src: PropTypes.string,\n  alt: PropTypes.string,\n  left: PropTypes.node,\n};\n\nconst defaultProps = {\n  src: '',\n  alt: '',\n  left: <></>,\n};\n\nconst ImgOrLeft = ({ src, alt, left }) => (\n  src\n    ? (\n      <img\n        className=\"left-icon button-img\"\n        width={24}\n        height={24}\n        src={src}\n        alt={alt}\n      />\n    )\n    : left\n);\n\nImgOrLeft.propTypes = propTypes;\nImgOrLeft.defaultProps = defaultProps;\n\nexport default ImgOrLeft;\n","import './EmailButton.css';\nimport Button from '@material-ui/core/Button';\nimport React from 'react';\nimport * as PropTypes from 'prop-types';\nimport ImgOrLeft from './ImgOrLeft';\n\nconst propTypes = {\n  name: PropTypes.string,\n  src: PropTypes.string,\n  href: PropTypes.string,\n  left: PropTypes.node,\n};\n\nconst defaultProps = {\n  name: '',\n  src: '',\n  href: '',\n  left: <></>,\n};\n\nconst EmailButton = ({\n  name, src, href, left,\n}) => (\n  <Button\n    color=\"primary\"\n    href={href}\n    target=\"_blank\"\n    rel=\"noopener noreferrer\"\n  >\n    <ImgOrLeft src={src} alt={name} left={left} />\n    <span>{name}</span>\n  </Button>\n);\n\nEmailButton.propTypes = propTypes;\nEmailButton.defaultProps = defaultProps;\n\nexport default EmailButton;\n","import EmailButton from './EmailButton';\n\nexport default EmailButton;\n","import gmailIcon from '../../imgs/gmail.ico';\n\nconst hrefResolver = ({\n  email = '', cc = '', subject = '', body = '',\n}) => (\n  // Sep 19 2016 http://stackoverflow.com/a/8852679/\n  `https://mail.google.com/mail/?view=cm&fs=1&to=${email}&cc=${cc}&su=${subject}&body=${body}`\n);\n\nconst gmailProvider = {\n  name: 'Gmail',\n  src: gmailIcon,\n  hrefResolver,\n};\n\nexport default gmailProvider;\n","import outlookIcon from '../../imgs/outlook.ico';\n\nconst hrefResolver = ({\n  email = '', cc = '', subject = '', body = '',\n}) => (\n  // Apr 21 2019 https://blogs.msdn.microsoft.com/carloshm/2016/01/16/how-to-compose-a-new-message-or-event-and-populate-fields-in-office365/#comment-1645\n  // cc not support. Thanks Micro$0ft\n  `https://outlook.live.com/?path=/mail/action/compose&to=${email}&cc=${cc}&subject=${subject}&body=${body}`\n);\n\nconst outlookProvider = {\n  name: 'Outlook',\n  src: outlookIcon,\n  hrefResolver,\n};\n\nexport default outlookProvider;\n","import yahooIcon from '../../imgs/yahoo.ico';\n\nconst hrefResolver = ({\n  email = '', cc = '', subject = '', body = '',\n}) => (\n  // Sep 19 2016 http://stackoverflow.com/a/30106907/1578294\n  `https://compose.mail.yahoo.com/?to=${email}&cc=${cc}&subject=${subject}&body=${body}`\n);\n\nconst yahooProvider = {\n  name: 'Yahoo',\n  src: yahooIcon,\n  hrefResolver,\n};\n\nexport default yahooProvider;\n","import EmailIcon from '@material-ui/icons/Email';\nimport React from 'react';\n\nconst hrefResolver = ({\n  email = '', cc = '', subject = '', body = '',\n}) => (\n  `mailto:${email}?subject=${subject}&body=${body}&cc=${cc}`\n);\n\nconst mailToProvider = {\n  name: 'Mail app',\n  left: <EmailIcon className=\"left-icon\" />,\n  hrefResolver,\n};\n\nexport default mailToProvider;\n","import gmailProvider from './gmailProvider';\nimport outlookProvider from './outlookProvider';\nimport yahooProvider from './yahooProvider';\nimport mailToProvider from './mailToProvider';\n\nexport { gmailProvider };\nexport { outlookProvider };\nexport { yahooProvider };\nexport { mailToProvider };\n\nconst commonEmailProviders = [gmailProvider, outlookProvider, yahooProvider];\nexport default commonEmailProviders;\n","const hrefSanitizer = ({ subject = '', body = '', ...rest }) => ({\n  subject: encodeURIComponent(subject),\n  body: encodeURIComponent(body),\n  ...rest,\n});\n\nexport default hrefSanitizer;\n","import React from 'react';\nimport {\n  keys, map, pick, pipe,\n} from 'ramda';\nimport * as PropTypes from 'prop-types';\nimport EmailButton from '../EmailButton';\nimport commonEmailProviders from '../../services/email-providers';\nimport hrefSanitizer from '../../utils/hrefSanitizer';\n\nconst defaultHrefResolverParams = {\n  email: '', cc: '', subject: '', body: '',\n};\n\nconst makeButtonFromProvider = (hrefResolverParams = defaultHrefResolverParams) => {\n  const Button = ({ name, hrefResolver, ...rest }) => (\n    <EmailButton\n      key={name}\n      name={name}\n      href={pipe(hrefSanitizer, hrefResolver)(hrefResolverParams)}\n      {...rest}\n    />\n  );\n  Button.propTypes = {\n    name: PropTypes.string,\n    hrefResolver: PropTypes.func.isRequired,\n  };\n  Button.defaultProps = {\n    name: '',\n  };\n  return Button;\n};\n\nconst hrefResolverParamsPicker = pick(keys(defaultHrefResolverParams));\nconst makeProviderToButtonMapperWithProps = pipe(\n  hrefResolverParamsPicker,\n  makeButtonFromProvider,\n);\n\nconst EmailArray = (props = { providers: commonEmailProviders, ...defaultHrefResolverParams }) => (\n  map(makeProviderToButtonMapperWithProps(props), props.providers)\n);\n\nexport default EmailArray;\n","import EmailArray from './EmailArray';\n\nexport default EmailArray;\n","import React from 'react';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Button from '@material-ui/core/Button';\nimport CallIcon from '@material-ui/icons/Call';\nimport Typography from '@material-ui/core/Typography';\nimport { always, startsWith, when } from 'ramda';\nimport './CouncillorCard.css';\nimport { Divider } from '@material-ui/core';\nimport Paper from '@material-ui/core/Paper';\nimport { isMobile } from 'react-device-detect';\nimport * as PropTypes from 'prop-types';\nimport makeYegCoreZoneEmail from '../../utils/makeYegCoreZoneEmail';\nimport makeOpenParkingEmail from '../../utils/makeOpenParkingEmail';\nimport EmailArray from '../EmailArray';\nimport commonEmailProviders, { mailToProvider } from '../../services/email-providers';\n\nconst defaultPhotoUrl = 'https://www.edmonton.ca/city_government/documents/Mayor-Headshot_800x494_rdax_500x309.jpg';\n\nconst propTypes = {\n  firstName: PropTypes.string,\n  lastName: PropTypes.string,\n  ward: PropTypes.string,\n  role: PropTypes.string,\n  phone: PropTypes.string,\n  email: PropTypes.string,\n  photoUrl: PropTypes.string,\n\n  campaignId: PropTypes.string,\n};\n\nconst defaultProps = {\n  firstName: '',\n  lastName: '',\n  ward: '',\n  role: '',\n  phone: '',\n  email: '',\n  photoUrl: defaultPhotoUrl,\n  campaignId: '',\n};\n\nfunction emailCreatorFrom(campaignId) {\n  switch (campaignId) {\n    case 'open_parking':\n      return makeOpenParkingEmail;\n    default:\n      return makeYegCoreZoneEmail;\n  }\n}\n\nconst CouncillorCard = ({\n  firstName, lastName, ward, role, phone, email, photoUrl, campaignId,\n}) => {\n  const name = `${firstName} ${lastName}`;\n  const subtitle = when(startsWith('Councillor'), s => `${s} – ${ward}`)(role);\n  const normalizeWard = when(startsWith('City'), always('Edmonton'));\n\n  const emailCreator = emailCreatorFrom(campaignId);\n  const [emailBody, emailSubject] = emailCreator({\n    role,\n    lastName,\n    ward: normalizeWard(ward),\n  });\n  const emailProviders = isMobile\n    ? [mailToProvider, ...commonEmailProviders]\n    : [...commonEmailProviders, mailToProvider];\n\n  return (\n    <Paper>\n      <div className=\"contact\">\n        <img\n          className=\"image\"\n          src={photoUrl}\n          alt={name}\n        />\n        <CardContent>\n          <Typography variant=\"h5\" component=\"h2\">\n            {name}\n          </Typography>\n          <Typography color=\"textSecondary\" paragraph>\n            {subtitle}\n          </Typography>\n          <Typography component=\"pre\" className=\"template\">\n            {emailBody}\n          </Typography>\n        </CardContent>\n      </div>\n      <Divider />\n      <CardActions>\n        <div className=\"email-array\">\n          <EmailArray\n            email={[email, 'council@edmonton.ca', 'city.clerk@edmonton.ca'].join(',')}\n            subject={emailSubject}\n            body={emailBody}\n            providers={emailProviders}\n          />\n          <Button color=\"primary\" href={`tel:${phone}`}>\n            <CallIcon className=\"left-icon\" />\n          Call\n          </Button>\n        </div>\n      </CardActions>\n    </Paper>\n  );\n};\n\nCouncillorCard.propTypes = propTypes;\nCouncillorCard.defaultProps = defaultProps;\n\nexport default CouncillorCard;\n","import CouncillorCard from './CouncillorCard';\n\nexport default CouncillorCard;\n","import React, { useState } from 'react';\nimport './App.css';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { geolocated } from 'react-geolocated';\nimport * as queryString from 'query-string';\nimport classNames from 'classnames';\nimport { Typography } from '@material-ui/core';\nimport * as PropTypes from 'prop-types';\nimport DebouncedSearchBar from './components/DebouncedSearchBar';\nimport useCouncillor from './hooks/useCouncillor';\nimport CouncillorCard from './components/CouncillorCard';\nimport geolocationProvider from './utils/geolocationProvider';\n\nconst geoLocatedConfig = {\n  positionOptions: {\n    enableHighAccuracy: false,\n    timeout: 5000,\n  },\n  userDecisionTimeout: 5000,\n  geolocationProvider,\n};\n\nconst propTypes = {\n  coords: PropTypes.shape({\n    latitude: PropTypes.number,\n    longitude: PropTypes.number,\n  }),\n};\n\nconst defaultProps = {\n  coords: undefined,\n};\n\nconst App = ({ coords }) => {\n  const [query, setQuery] = useState('');\n  const [councillor, originalQuery] = useCouncillor({ address: query, coords });\n  // eslint-disable-next-line camelcase\n  const { iframe_pls: iframe, cid } = queryString.parse(window.location.search);\n\n  const className = classNames(\n    'app',\n    { 'iframe-pls': iframe },\n  );\n\n  if (cid === 'open_parking') {\n    document.title = 'Parking Minimums - Take Action On Climate';\n  }\n\n  return (\n    <div className={className}>\n      <CssBaseline />\n      <DebouncedSearchBar\n        label=\"Find your councillor by postal code/address\"\n        onQueryChange={setQuery}\n        isLoading={query !== originalQuery}\n        autoFocus={!iframe}\n      />\n      <Typography gutterBottom />\n      {councillor && <CouncillorCard {...councillor} campaignId={cid} />}\n    </div>\n  );\n};\n\nApp.propTypes = propTypes;\nApp.defaultProps = defaultProps;\n\nexport default geolocated(geoLocatedConfig)(App);\n","const geolocationProvider = typeof navigator !== 'undefined' && navigator.geolocation;\n\nexport default geolocationProvider;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'core-js';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.register();\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/gmail.2db0d88c.ico\";","module.exports = __webpack_public_path__ + \"static/media/outlook.759fade9.ico\";","module.exports = __webpack_public_path__ + \"static/media/yahoo.9796ed78.ico\";"],"sourceRoot":""}