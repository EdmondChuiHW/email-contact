{"version":3,"sources":["components/search-bar.component.js","hooks/useCouncillor.hook.js","services/address2councillor.service.js","App.js","serviceWorker.js","index.js"],"names":["search_bar_component","_ref","_ref$query","query","setQuery","onChange","useCallback","e","target","value","react_default","a","createElement","useCouncillor","address","arguments","length","undefined","_useState","useState","_useState2","Object","slicedToArray","councillor","setCouncillor","useEffect","req","request","url","json","qs","getCouncillorFromAddress","then","abort","App","_useDebounce","useDebounce","debouncedQuery","className","JSON","stringify","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uXAEeA,EAAA,SAAAC,GAA4B,IAAAC,EAAAD,EAA1BE,aAA0B,IAAAD,EAAlB,GAAkBA,EAAdE,EAAcH,EAAdG,SAErBC,EAAWC,sBADA,SAAAC,GAAC,OAAIH,EAASG,EAAEC,OAAOC,QACD,IACvC,OAAOC,EAAAC,EAAAC,cAAA,SACLH,MAAON,EACPE,SAAUA,gCCJDQ,EAAgB,WAAkB,IAAjBC,EAAiBC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAP,GAAOG,EACTC,wBAASF,GADAG,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACtCK,EADsCH,EAAA,GAC1BI,EAD0BJ,EAAA,GAO7C,OALAK,oBAAU,WACR,IAAMC,ECJ8B,eAACZ,EAADC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAW,GAAX,OAAkBY,IAAQ,CAChEC,IAAK,2DACLC,MAAM,EACNC,GAAI,CACFhB,aDAYiB,CAAyBjB,GAErC,OADAY,EAAIM,KAAKR,GACF,kBAAME,EAAIO,UAChB,CAACnB,IACGS,YEQMW,EAZH,WAAM,IAAAhB,EACUC,mBAAS,IADnBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACTf,EADSiB,EAAA,GACFhB,EADEgB,EAAA,GAAAe,EAESC,sBAAYjC,EAAO,KAArCkC,EAFShB,OAAAC,EAAA,EAAAD,CAAAc,EAAA,MAGVZ,EAAaV,EAAcwB,GACjC,OACE3B,EAAAC,EAAAC,cAAA,OAAK0B,UAAU,OACb5B,EAAAC,EAAAC,cAACZ,EAAD,CAAWG,MAAOA,EAAOC,SAAUA,IACnCM,EAAAC,EAAAC,cAAA,WAAM2B,KAAKC,UAAUjB,MCDPkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOrC,EAAAC,EAAAC,cAACoC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,KAAK,SAAAsB,GACjCA,EAAaC","file":"static/js/main.3f249f6c.chunk.js","sourcesContent":["import React, {useCallback} from 'react';\n\nexport default ({query = '', setQuery}) => {\n  const callback = e => setQuery(e.target.value);\n  const onChange = useCallback(callback, []);\n  return <input\n    value={query}\n    onChange={onChange}\n  />;\n};\n","import {useEffect, useState} from 'react';\nimport {getCouncillorFromAddress} from \"../services/address2councillor.service\";\n\nexport const useCouncillor = (address = '') => {\n  const [councillor, setCouncillor] = useState(undefined);\n  useEffect(() => {\n    const req = getCouncillorFromAddress(address);\n    req.then(setCouncillor);\n    return () => req.abort();\n  }, [address]);\n  return councillor;\n};\n","import request from \"request-promise-native\";\n\nexport const getCouncillorFromAddress = (address = '') => request({\n  url: 'https://address2contact.herokuapp.com/address2councillor',\n  json: true,\n  qs: {\n    address,\n  },\n});\n","import React, {useState} from 'react';\nimport SearchBar from './components/search-bar.component';\nimport './App.css';\nimport {useCouncillor} from \"./hooks/useCouncillor.hook\";\nimport {useDebounce} from \"use-debounce\";\n\nconst App = () => {\n  const [query, setQuery] = useState('');\n  const [debouncedQuery] = useDebounce(query, 300);\n  const councillor = useCouncillor(debouncedQuery);\n  return (\n    <div className=\"App\">\n      <SearchBar query={query} setQuery={setQuery}/>\n      <div>{JSON.stringify(councillor)}</div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}